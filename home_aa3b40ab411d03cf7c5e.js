!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./src/home/home.js")}({"./node_modules/scrollreveal/dist/scrollreveal.js":function(e,t,n){var i;!function(){"use strict";var o,r;function s(e){return void 0===this||Object.getPrototypeOf(this)!==s.prototype?new s(e):((o=this).version="3.4.0",o.tools=new h,o.isSupported()?(o.tools.extend(o.defaults,e||{}),o.defaults.container=a(o.defaults),o.store={elements:{},containers:[]},o.sequences={},o.history=[],o.uid=0,o.initialized=!1):"undefined"!=typeof console&&null!==console&&console.log("ScrollReveal is not supported in this browser."),o)}function a(e){if(e&&e.container){if("string"==typeof e.container)return window.document.documentElement.querySelector(e.container);if(o.tools.isNode(e.container))return e.container;console.log('ScrollReveal: invalid container "'+e.container+'" provided.'),console.log("ScrollReveal: falling back to default container.")}return o.defaults.container}function l(){return++o.uid}function c(e,t,n){t.container&&(t.container=n),e.config?e.config=o.tools.extendClone(e.config,t):e.config=o.tools.extendClone(o.defaults,t),"top"===e.config.origin||"bottom"===e.config.origin?e.config.axis="Y":e.config.axis="X"}function d(e){var t=window.getComputedStyle(e.domEl);e.styles||(e.styles={transition:{},transform:{},computed:{}},e.styles.inline=e.domEl.getAttribute("style")||"",e.styles.inline+="; visibility: visible; ",e.styles.computed.opacity=t.opacity,t.transition&&"all 0s ease 0s"!==t.transition?e.styles.computed.transition=t.transition+", ":e.styles.computed.transition=""),e.styles.transition.instant=u(e,0),e.styles.transition.delayed=u(e,e.config.delay),e.styles.transform.initial=" -webkit-transform:",e.styles.transform.target=" -webkit-transform:",f(e),e.styles.transform.initial+="transform:",e.styles.transform.target+="transform:",f(e)}function u(e,t){var n=e.config;return"-webkit-transition: "+e.styles.computed.transition+"-webkit-transform "+n.duration/1e3+"s "+n.easing+" "+t/1e3+"s, opacity "+n.duration/1e3+"s "+n.easing+" "+t/1e3+"s; transition: "+e.styles.computed.transition+"transform "+n.duration/1e3+"s "+n.easing+" "+t/1e3+"s, opacity "+n.duration/1e3+"s "+n.easing+" "+t/1e3+"s; "}function f(e){var t,n=e.config,i=e.styles.transform;t="top"===n.origin||"left"===n.origin?/^-/.test(n.distance)?n.distance.substr(1):"-"+n.distance:n.distance,parseInt(n.distance)&&(i.initial+=" translate"+n.axis+"("+t+")",i.target+=" translate"+n.axis+"(0)"),n.scale&&(i.initial+=" scale("+n.scale+")",i.target+=" scale(1)"),n.rotate.x&&(i.initial+=" rotateX("+n.rotate.x+"deg)",i.target+=" rotateX(0)"),n.rotate.y&&(i.initial+=" rotateY("+n.rotate.y+"deg)",i.target+=" rotateY(0)"),n.rotate.z&&(i.initial+=" rotateZ("+n.rotate.z+"deg)",i.target+=" rotateZ(0)"),i.initial+="; opacity: "+n.opacity+";",i.target+="; opacity: "+e.styles.computed.opacity+";"}function m(e){var t=e.config.container;t&&-1===o.store.containers.indexOf(t)&&o.store.containers.push(e.config.container),o.store.elements[e.id]=e}function p(){if(o.isSupported()){g();for(var e=0;e<o.store.containers.length;e++)o.store.containers[e].addEventListener("scroll",y),o.store.containers[e].addEventListener("resize",y);o.initialized||(window.addEventListener("scroll",y),window.addEventListener("resize",y),o.initialized=!0)}return o}function y(){r(g)}function g(){var e,t,n,i,r;o.tools.forOwn(o.sequences,function(e){r=o.sequences[e],n=!1;for(var t=0;t<r.elemIds.length;t++)i=r.elemIds[t],b(o.store.elements[i])&&!n&&(n=!0);r.active=n}),o.tools.forOwn(o.store.elements,function(n){t=o.store.elements[n],e=function(e){var t=e.config.useDelay;return"always"===t||"onload"===t&&!o.initialized||"once"===t&&!e.seen}(t),function(e){if(e.sequence){var t=o.sequences[e.sequence.id];return t.active&&!t.blocked&&!e.revealing&&!e.disabled}return b(e)&&!e.revealing&&!e.disabled}(t)?(t.config.beforeReveal(t.domEl),e?t.domEl.setAttribute("style",t.styles.inline+t.styles.transform.target+t.styles.transition.delayed):t.domEl.setAttribute("style",t.styles.inline+t.styles.transform.target+t.styles.transition.instant),v("reveal",t,e),t.revealing=!0,t.seen=!0,t.sequence&&function(e,t){var n=0,i=0,r=o.sequences[e.sequence.id];r.blocked=!0,t&&"onload"===e.config.useDelay&&(i=e.config.delay);e.sequence.timer&&(n=Math.abs(e.sequence.timer.started-new Date),window.clearTimeout(e.sequence.timer));e.sequence.timer={started:new Date},e.sequence.timer.clock=window.setTimeout(function(){r.blocked=!1,e.sequence.timer=null,y()},Math.abs(r.interval)+i-n)}(t,e)):function(e){if(e.sequence){var t=o.sequences[e.sequence.id];return!t.active&&e.config.reset&&e.revealing&&!e.disabled}return!b(e)&&e.config.reset&&e.revealing&&!e.disabled}(t)&&(t.config.beforeReset(t.domEl),t.domEl.setAttribute("style",t.styles.inline+t.styles.transform.initial+t.styles.transition.instant),v("reset",t),t.revealing=!1)})}function v(e,t,n){var i=0,o=0,r="after";switch(e){case"reveal":o=t.config.duration,n&&(o+=t.config.delay),r+="Reveal";break;case"reset":o=t.config.duration,r+="Reset"}t.timer&&(i=Math.abs(t.timer.started-new Date),window.clearTimeout(t.timer.clock)),t.timer={started:new Date},t.timer.clock=window.setTimeout(function(){t.config[r](t.domEl),t.timer=null},o-i)}function w(e){var t=0,n=0,i=e.offsetHeight,o=e.offsetWidth;do{isNaN(e.offsetTop)||(t+=e.offsetTop),isNaN(e.offsetLeft)||(n+=e.offsetLeft),e=e.offsetParent}while(e);return{top:t,left:n,height:i,width:o}}function b(e){var t,n,i,o,r,s,a,l,c=w(e.domEl),d=function(e){return{width:e.clientWidth,height:e.clientHeight}}(e.config.container),u=function(e){if(e&&e!==window.document.documentElement){var t=w(e);return{x:e.scrollLeft+t.left,y:e.scrollTop+t.top}}return{x:window.pageXOffset,y:window.pageYOffset}}(e.config.container),f=e.config.viewFactor,m=c.height,p=c.width,y=c.top,g=c.left;return t=y+m*f,n=g+p*f,i=y+m-m*f,o=g+p-p*f,r=u.y+e.config.viewOffset.top,s=u.x+e.config.viewOffset.left,a=u.y-e.config.viewOffset.bottom+d.height,l=u.x-e.config.viewOffset.right+d.width,t<a&&i>r&&n<l&&o>s||"fixed"===window.getComputedStyle(e.domEl).position}function h(){}s.prototype.defaults={origin:"bottom",distance:"20px",duration:500,delay:0,rotate:{x:0,y:0,z:0},opacity:0,scale:.9,easing:"cubic-bezier(0.6, 0.2, 0.1, 1)",container:window.document.documentElement,mobile:!0,reset:!1,useDelay:"always",viewFactor:.2,viewOffset:{top:0,right:0,bottom:0,left:0},beforeReveal:function(e){},beforeReset:function(e){},afterReveal:function(e){},afterReset:function(e){}},s.prototype.isSupported=function(){var e=document.documentElement.style;return"WebkitTransition"in e&&"WebkitTransform"in e||"transition"in e&&"transform"in e},s.prototype.reveal=function(e,t,n,i){var r,s,u,f,y,g;if(void 0!==t&&"number"==typeof t?(n=t,t={}):void 0!==t&&null!==t||(t={}),!(s=function(e,t){if("string"==typeof e)return Array.prototype.slice.call(t.querySelectorAll(e));if(o.tools.isNode(e))return[e];if(o.tools.isNodeList(e))return Array.prototype.slice.call(e);if(Array.isArray(e))return e.filter(o.tools.isNode);return[]}(e,r=a(t))).length)return console.log('ScrollReveal: reveal on "'+e+'" failed, no elements found.'),o;n&&"number"==typeof n&&(g=l(),y=o.sequences[g]={id:g,interval:n,elemIds:[],active:!1});for(var v=0;v<s.length;v++)(f=s[v].getAttribute("data-sr-id"))?u=o.store.elements[f]:(u={id:l(),domEl:s[v],seen:!1,revealing:!1}).domEl.setAttribute("data-sr-id",u.id),y&&(u.sequence={id:y.id,index:y.elemIds.length},y.elemIds.push(u.id)),c(u,t,r),d(u),m(u),o.tools.isMobile()&&!u.config.mobile||!o.isSupported()?(u.domEl.setAttribute("style",u.styles.inline),u.disabled=!0):u.revealing||u.domEl.setAttribute("style",u.styles.inline+u.styles.transform.initial);return!i&&o.isSupported()&&(!function(e,t,n){var i={target:e,config:t,interval:n};o.history.push(i)}(e,t,n),o.initTimeout&&window.clearTimeout(o.initTimeout),o.initTimeout=window.setTimeout(p,0)),o},s.prototype.sync=function(){if(o.history.length&&o.isSupported()){for(var e=0;e<o.history.length;e++){var t=o.history[e];o.reveal(t.target,t.config,t.interval,!0)}p()}else console.log("ScrollReveal: sync failed, no reveals found.");return o},h.prototype.isObject=function(e){return null!==e&&"object"==typeof e&&e.constructor===Object},h.prototype.isNode=function(e){return"object"==typeof window.Node?e instanceof window.Node:e&&"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName},h.prototype.isNodeList=function(e){var t=Object.prototype.toString.call(e);return"object"==typeof window.NodeList?e instanceof window.NodeList:e&&"object"==typeof e&&/^\[object (HTMLCollection|NodeList|Object)\]$/.test(t)&&"number"==typeof e.length&&(0===e.length||this.isNode(e[0]))},h.prototype.forOwn=function(e,t){if(!this.isObject(e))throw new TypeError('Expected "object", but received "'+typeof e+'".');for(var n in e)e.hasOwnProperty(n)&&t(n)},h.prototype.extend=function(e,t){return this.forOwn(t,function(n){this.isObject(t[n])?(e[n]&&this.isObject(e[n])||(e[n]={}),this.extend(e[n],t[n])):e[n]=t[n]}.bind(this)),e},h.prototype.extendClone=function(e,t){return this.extend(this.extend({},e),t)},h.prototype.isMobile=function(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)},r=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)},void 0===(i=function(){return s}.call(t,n,t,e))||(e.exports=i)}()},"./src/home/home.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n("./node_modules/scrollreveal/dist/scrollreveal.js"),o=n.n(i);var r=n("./src/scripts/three.js");n("./src/styles/userfeeds.scss");function s(){window.sr=o()({duration:700,viewFactor:.4}),sr.isSupported()?(document.documentElement.classList.add("sr"),sr.reveal(".anim-fade",{distance:"0px",scale:1,duration:1e4}),sr.reveal(".anim-fadeBottom",{origin:"bottom",scale:1,distance:"10px",easing:"ease-in",duration:300}),sr.reveal(".anim-fadeRight",{origin:"right"}),sr.reveal(".anim-fadeLeft",{origin:"left",scale:1,distance:"20px",easing:"cubic-bezier(0.6, 0.3, 0.1, 1)"}),sr.reveal(".anim-fadeTop",{origin:"top"}),sr.reveal(".anim-backToFront",{scale:.5}),sr.reveal(".anim-frontToBack",{scale:1.2})):document.documentElement.classList.remove("sr"),function(){let e=document.querySelector(".js-mobileMenu");e.addEventListener("click",function(t){t.preventDefault();let n=e.getAttribute("data-target");void 0!=n&&""!=n&&(e.classList.toggle("is-active"),document.getElementById(n).classList.toggle("is-active"))})}(),Object(r.animate)()}"complete"===document.readyState?s():window.addEventListener("load",s)},"./src/scripts/three.js":function(e,t){},"./src/styles/userfeeds.scss":function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,